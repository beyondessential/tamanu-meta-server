<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BES :: Password Generator</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --bes-blue: #0099e5; /* The blue color from your logo */
      --bes-dark: #212529;
    }

    body {
      padding-top: 2rem;
      padding-bottom: 2rem;
    }
    .container {
      max-width: 800px;
    }
    h1 {
      margin-bottom: 1.5rem;
      color: var(--bes-dark);
      border-bottom: 3px solid var(--bes-blue);
      padding-bottom: 0.5rem;
      display: inline-block;
    }
    .card {
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
      border-radius: 0.5rem;
      border-top: 4px solid var(--bes-blue);
    }
    .btn-primary {
      background-color: var(--bes-blue);
      border-color: var(--bes-blue);
    }
    .btn-primary:hover {
      background-color: #0077b5;
      border-color: #0077b5;
    }
    .btn-outline-secondary:hover {
      background-color: var(--bes-blue);
      border-color: var(--bes-blue);
    }
    .form-control:focus {
      border-color: var(--bes-blue);
      box-shadow: 0 0 0 0.25rem rgba(0, 153, 229, 0.25);
    }
    .form-check-input:checked {
      background-color: var(--bes-blue);
      border-color: var(--bes-blue);
    }
    .company-logo {
      max-width: 120px;
      margin-bottom: 1rem;
    }
    .password-header {
      display: flex;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    .password-title {
      margin-left: 1rem;
      margin-bottom: 0;
    }
    #generatedPassword, #passwordToVerify {
      font-family: monospace;
    }
    .feedback-valid {
      color: #198754; /* Bootstrap success color */
    }
    .feedback-invalid {
      color: #dc3545; /* Bootstrap danger color */
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="password-header">
      <svg class="company-logo" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
        <circle cx="100" cy="100" r="95" fill="white" stroke="#0099e5" stroke-width="3"/>
        <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-weight="bold" font-size="64">
          <tspan fill="#212529">b</tspan><tspan fill="#0099e5">e</tspan><tspan fill="#212529">s</tspan>
        </text>
      </svg>
      <h1 class="password-title">Password Generator</h1>
    </div>

    <div class="card mb-4">
      <div class="card-body">
        <div class="form-group row mb-3">
          <label for="productSelect" class="col-sm-3 col-form-label">Product</label>
          <div class="col-sm-9">
            <select class="form-control" id="productSelect">
              <option value="bta">Tamanu</option>
              <option value="btu">Tupaia</option>
              <option value="bsn">SENAITE</option>
              <option value="bes">Other</option>
            </select>
          </div>
        </div>

        <div class="form-group row mb-3">
          <label for="passwordLength" class="col-sm-3 col-form-label">Length</label>
          <div class="col-sm-9">
            <input type="number" class="form-control" id="passwordLength" value="20" min="15" max="64">
          </div>
        </div>

        <div class="form-group row mb-3">
          <div class="col-sm-3">Options</div>
          <div class="col-sm-9">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="useSymbols" checked>
              <label class="form-check-label" for="useSymbols">
                Symbols
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="useChecksum" checked>
              <label class="form-check-label" for="useChecksum">
                Checksum
              </label>
            </div>
          </div>
        </div>

        <div class="form-group row mb-3">
          <div class="col-sm-3"></div>
          <div class="col-sm-9">
            <button type="button" class="btn btn-primary" id="generateBtn">Make a new one!</button>
          </div>
        </div>

        <div class="form-group row mb-3">
          <label for="generatedPassword" class="col-sm-3 col-form-label">Password</label>
          <div class="col-sm-9">
            <div class="input-group">
              <input type="text" class="form-control" id="generatedPassword" readonly autocomplete=off>
              <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" id="copyBtn" title="Copy to clipboard">
                  <i class="fas fa-clipboard"></i> Copy
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Password Verification Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">Password Verification</h5>
      </div>
      <div class="card-body">
        <div class="form-group row mb-3">
          <label for="passwordToVerify" class="col-sm-3 col-form-label">Verify Password</label>
          <div class="col-sm-9">
            <div class="input-group">
              <input type="text" class="form-control" id="passwordToVerify" placeholder="Enter password with checksum to verify" autocomplete=off>
              <div class="input-group-append">
                <button class="btn btn-primary" type="button" id="verifyBtn">
                  <i class="fas fa-check-circle"></i> Verify
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="form-group row">
          <div class="col-sm-3"></div>
          <div class="col-sm-9">
            <div id="verificationResult"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const generateBtn = document.getElementById('generateBtn');
      const copyBtn = document.getElementById('copyBtn');
      const productSelect = document.getElementById('productSelect');
      const passwordLength = document.getElementById('passwordLength');
      const useSymbols = document.getElementById('useSymbols');
      const useChecksum = document.getElementById('useChecksum');
      const generatedPassword = document.getElementById('generatedPassword');
      const passwordToVerify = document.getElementById('passwordToVerify');
      const verifyBtn = document.getElementById('verifyBtn');
      const verificationResult = document.getElementById('verificationResult');

      // Calculate checksum for a string using a simple CRC-like algorithm
      function calculateChecksum(str, charset) {
        let crc = 0;
        for (let i = 0; i < str.length; i++) {
          // Simple CRC calculation
          crc = ((crc << 5) - crc + str.charCodeAt(i)) & 0xFFFF;
        }

        // Generate two characters based on the crc value
        const firstChar = charset.charAt(crc % charset.length);
        const secondChar = charset.charAt(Math.floor(crc / charset.length) % charset.length);

        return firstChar + secondChar;
      }

      // Generate password function
      function generatePassword() {
        const prefix = productSelect.value + '_';
        const desiredLength = parseInt(passwordLength.value, 10);
        const includeSymbols = useSymbols.checked;
        const includeChecksum = useChecksum.checked;

        // Adjust the random part length based on checksum
        const checksumLength = includeChecksum ? 3 : 0;
        const randomPartLength = desiredLength - prefix.length - checksumLength;

        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = '@$%&';

        let charset = lowercase + uppercase + numbers;
        if (includeSymbols) {
          charset += symbols;
        }

        // Generate the random part
        let randomString = '';
        const randomValues = new Uint8Array(randomPartLength);
        window.crypto.getRandomValues(randomValues);

        for (let i = 0; i < randomPartLength; i++) {
          randomString += charset.charAt(randomValues[i] % charset.length);
        }

        // Ensure requirements are met
        if (!/[0-9]/.test(randomString)) {
          return generatePassword();
        }

        if (includeSymbols && !symbols.split('').some(char => randomString.includes(char))) {
          return generatePassword();
        }

        // Base password without checksum
        const basePassword = prefix + randomString;

        // Add checksum if enabled
        if (includeChecksum) {
          const checksum = calculateChecksum(basePassword, charset);
          return basePassword + '.' + checksum;
        }

        return basePassword;
      }

      // Verify password function
      function verifyPassword(password) {
        // Determine if the password format is correct (has a prefix and checksum)
        const parts = password.split('.');
        if (parts.length !== 2) {
          return {
            valid: false,
            message: 'Invalid format: Password should contain a base part and a checksum separated by a dot (.)'
          };
        }

        const basePassword = parts[0];
        const providedChecksum = parts[1];

        if (providedChecksum.length !== 2) {
          return {
            valid: false,
            message: 'Invalid checksum length: Checksum should be 2 characters'
          };
        }

        // Determine charset based on what the password contains
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = '@$%&';

        let charset = lowercase + uppercase + numbers;
        if (/[@$%&]/.test(password)) {
          charset += symbols;
        }

        // Calculate what the checksum should be
        const expectedChecksum = calculateChecksum(basePassword, charset);

        if (providedChecksum === expectedChecksum) {
          return {
            valid: true,
            message: 'Password checksum is valid.'
          };
        } else {
          return {
            valid: false,
            message: `Invalid checksum: Expected ${expectedChecksum}, got ${providedChecksum}`
          };
        }
      }

      // Generate password on page load
      generatedPassword.value = generatePassword();

      // Generate password on button click
      generateBtn.addEventListener('click', function() {
        generatedPassword.value = generatePassword();
      });

      // Copy to clipboard functionality
      copyBtn.addEventListener('click', function() {
        generatedPassword.select();
        document.execCommand('copy');

        // Visual feedback for copy
        const originalText = copyBtn.innerHTML;
        copyBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
        setTimeout(() => {
          copyBtn.innerHTML = originalText;
        }, 2000);
      });

      // Verify password on button click
      verifyBtn.addEventListener('click', function() {
        const password = passwordToVerify.value.trim();
        if (!password) {
          verificationResult.innerHTML = '<span class="feedback-invalid">Please enter a password to verify.</span>';
          return;
        }

        const result = verifyPassword(password);
        if (result.valid) {
          verificationResult.innerHTML = '<span class="feedback-valid"><i class="fas fa-check-circle"></i> ' + result.message + '</span>';
        } else {
          verificationResult.innerHTML = '<span class="feedback-invalid"><i class="fas fa-times-circle"></i> ' + result.message + '</span>';
        }
      });

      // Verify on Enter key
      passwordToVerify.addEventListener('keyup', function(event) {
        if (event.key === 'Enter') {
          verifyBtn.click();
        }
      });
    });
  </script>
</body>
</html>
